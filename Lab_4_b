//Doubly LL

public class DoublyLinkedList {
    class Node {
        int data;
        Node prev, next;

        Node(int data) {
            this.data = data;
            prev = next = null;
        }
    }

    Node head = null, tail = null;

    // Add First
    public void addFirst(int data) {
        Node newNode = new Node(data);

        if (head == null) {
            head = tail = newNode;
            return;
        }

        newNode.next = head;
        head.prev = newNode;
        head = newNode;
    }

    // Add Last
    public void addLast(int data) {
        Node newNode = new Node(data);

        if (head == null) {
            head = tail = newNode;
            return;
        }

        tail.next = newNode;
        newNode.prev = tail;
        tail = newNode;
    }

    // Traverse Forward
    public void traverseForward() {
        Node temp = head;
        System.out.print("Forward: ");
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }

    // Traverse Backward
    public void traverseBackward() {
        Node temp = tail;
        System.out.print("Backward: ");
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.prev;
        }
        System.out.println();
    }

    // Insert after given key
    public void insertAfter(int key, int data) {
        Node temp = head;
        while (temp != null && temp.data != key) {
            temp = temp.next;
        }
        if (temp == null) {
            System.out.println("Key not found!");
            return;
        }

        Node newNode = new Node(data);
        newNode.next = temp.next;
        newNode.prev = temp;

        if (temp.next != null) {
            temp.next.prev = newNode;
        } else {
            tail = newNode; // inserting at end
        }

        temp.next = newNode;
    }

    // Delete node by value
    public void deleteNode(int key) {
        Node temp = head;

        while (temp != null && temp.data != key) {
            temp = temp.next;
        }

        if (temp == null) {
            System.out.println("Node not found!");
            return;
        }

        if (temp.prev != null) {
            temp.prev.next = temp.next;
        } else {
            head = temp.next; // deleting head
        }

        if (temp.next != null) {
            temp.next.prev = temp.prev;
        } else {
            tail = temp.prev; // deleting tail
        }
    }

    // Main function
    public static void main(String[] args) {
        DoublyLinkedList dll = new DoublyLinkedList();

        // Create 5 nodes using addLast
        for (int i = 1; i <= 5; i++) {
            dll.addLast(i);
        }

        dll.traverseForward();
        dll.traverseBackward();

        // Add First
        dll.addFirst(100);
        System.out.println("\nAfter addFirst(100):");
        dll.traverseForward();

        // Add Last
        dll.addLast(200);
        System.out.println("\nAfter addLast(200):");
        dll.traverseForward();

        // Insert after 3
        dll.insertAfter(3, 99);
        System.out.println("\nAfter inserting 99 after 3:");
        dll.traverseForward();

        // Delete node 2
        dll.deleteNode(2);
        System.out.println("\nAfter deleting 2:");
        dll.traverseForward();
    }
} 

OUTPUT:

Forward: 1 2 3 4 5 
Backward: 5 4 3 2 1 

After addFirst(100):
Forward: 100 1 2 3 4 5 

After addLast(200):
Forward: 100 1 2 3 4 5 200 

After inserting 99 after 3:
Forward: 100 1 2 3 99 4 5 200 

After deleting 2:
Forward: 100 1 3 99 4 5 200 
